name: 自动构建 qwen-code 可执行文件

on:
  schedule:
    # 每天北京时间早上 8 点（UTC 0 点）运行
    - cron: '0 0 * * *'
  workflow_dispatch: # 支持手动触发
  push:
    branches: [ main ] # 当主分支有推送时也触发

# 添加权限设置
permissions:
  contents: write  # 允许创建 release 和写入内容

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      latest-commit: ${{ steps.check.outputs.latest-commit }}
    steps:
      - name: 检查上游仓库是否有更新
        id: check
        run: |
          # 获取上游最新 commit
          LATEST_COMMIT=$(curl -s https://api.github.com/repos/QwenLM/qwen-code/commits/main | jq -r '.sha[:7]')
          echo "latest-commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          
          # 检查是否已经构建过这个版本
          if gh release view "auto-$LATEST_COMMIT" >/dev/null 2>&1; then
            echo "版本 $LATEST_COMMIT 已存在，跳过构建"
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "发现新版本 $LATEST_COMMIT，开始构建"
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: check-updates
    if: needs.check-updates.outputs.should-build == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            binary-name: qwen
            archive-ext: tar.gz
          - os: windows-latest
            target: windows-x64
            binary-name: qwen.exe
            archive-ext: zip
          - os: macos-13  # Intel macOS
            target: macos-x64
            binary-name: qwen
            archive-ext: tar.gz
          - os: macos-latest  # Apple Silicon macOS (最新)
            target: macos-arm64
            binary-name: qwen
            archive-ext: tar.gz
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: 克隆上游仓库
        uses: actions/checkout@v4
        with:
          repository: QwenLM/qwen-code
          ref: main
          
      - name: 安装 Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 安装依赖
        run: npm install
        
      - name: 找到入口文件
        id: entry
        shell: bash
        run: |
          # 查找可能的入口文件
          if [ -f "bundle/gemini.js" ]; then
            echo "entry=bundle/gemini.js" >> $GITHUB_OUTPUT
            echo "找到入口文件: bundle/gemini.js"
          else
            # 从 package.json 读取 main 或 bin
            if [ -f "package.json" ]; then
              MAIN=$(node -e "
                const pkg = require('./package.json');
                if (pkg.bin) {
                  if (typeof pkg.bin === 'string') {
                    console.log(pkg.bin);
                  } else {
                    console.log(Object.values(pkg.bin)[0]);
                  }
                } else {
                  console.log(pkg.main || 'index.js');
                }
              " 2>/dev/null || echo "index.js")
              echo "entry=$MAIN" >> $GITHUB_OUTPUT
              echo "从 package.json 读取入口文件: $MAIN"
            else
              echo "entry=index.js" >> $GITHUB_OUTPUT
              echo "使用默认入口文件: index.js"
            fi
          fi
        
      - name: 使用 Bun 编译可执行文件
        run: |
          echo "编译入口文件: ${{ steps.entry.outputs.entry }}"
          bun build ${{ steps.entry.outputs.entry }} --compile --outfile ${{ matrix.binary-name }}
          
      - name: 验证可执行文件
        shell: bash
        run: |
          EXECUTABLE="${{ matrix.binary-name }}"
          echo "验证可执行文件: $EXECUTABLE"
          
          # 检查文件是否存在
          if [ ! -f "$EXECUTABLE" ]; then
            echo "❌ 可执行文件不存在: $EXECUTABLE"
            exit 1
          fi
          
          # 检查文件大小
          FILE_SIZE=$(stat -c%s "$EXECUTABLE" 2>/dev/null || stat -f%z "$EXECUTABLE" 2>/dev/null || wc -c < "$EXECUTABLE")
          echo "文件大小: $FILE_SIZE bytes"
          
          if [ "$FILE_SIZE" -lt 1000000 ]; then
            echo "⚠️ 警告: 文件大小可能异常小"
          fi
          
          # 尝试运行版本检查（可能失败，但不影响构建）
          echo "尝试运行版本检查..."
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./"$EXECUTABLE" --version 2>/dev/null || ./"$EXECUTABLE" -v 2>/dev/null || echo "版本检查失败，但文件已生成"
          else
            ./"$EXECUTABLE" --version 2>/dev/null || ./"$EXECUTABLE" -v 2>/dev/null || echo "版本检查失败，但文件已生成"
          fi
          
          echo "✅ 可执行文件验证完成"
      
      - name: 创建压缩包
        shell: bash
        run: |
          ARCHIVE_NAME="qwen-${{ matrix.target }}.${{ matrix.archive-ext }}"
          echo "创建压缩包: $ARCHIVE_NAME"
          
          if [[ "${{ matrix.archive-ext }}" == "zip" ]]; then
            # Windows 使用 zip
            7z a "$ARCHIVE_NAME" "${{ matrix.binary-name }}"
          else
            # Unix 系统使用 tar.gz
            tar -czf "$ARCHIVE_NAME" "${{ matrix.binary-name }}"
          fi
          
          # 验证压缩包
          if [ ! -f "$ARCHIVE_NAME" ]; then
            echo "❌ 压缩包创建失败"
            exit 1
          fi
          
          echo "✅ 压缩包创建成功"
        
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: qwen-${{ matrix.target }}
          path: qwen-${{ matrix.target }}.${{ matrix.archive-ext }}
          retention-days: 30

  release:
    needs: [check-updates, build]
    runs-on: ubuntu-latest
    if: needs.check-updates.outputs.should-build == 'true'
    
    steps:
      - name: 设置仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 获取许可证文件
        run: |
          # 从上游仓库获取许可证文件
          curl -s https://raw.githubusercontent.com/QwenLM/qwen-code/main/LICENSE -o LICENSE
          curl -s https://raw.githubusercontent.com/QwenLM/qwen-code/main/NOTICE -o NOTICE 2>/dev/null || echo "NOTICE 文件不存在"
          curl -s https://raw.githubusercontent.com/QwenLM/qwen-code/main/COPYRIGHT -o COPYRIGHT 2>/dev/null || echo "COPYRIGHT 文件不存在"
          
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        
      - name: 准备发布文件
        shell: bash
        run: |
          # 将所有压缩包移到当前目录
          mv qwen-linux-x64/qwen-linux-x64.tar.gz . || true
          mv qwen-windows-x64/qwen-windows-x64.zip . || true
          mv qwen-macos-x64/qwen-macos-x64.tar.gz . || true
          mv qwen-macos-arm64/qwen-macos-arm64.tar.gz . || true
          
          # 列出所有文件
          echo "准备发布的文件："
          ls -la *.tar.gz *.zip LICENSE* NOTICE* COPYRIGHT* 2>/dev/null || true
          
      - name: 创建发布
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          COMMIT_SHA="${{ needs.check-updates.outputs.latest-commit }}"
          RELEASE_TAG="auto-$COMMIT_SHA"
          RELEASE_NAME="自动构建 - $COMMIT_SHA ($(date '+%Y-%m-%d'))"
          
          # 准备发布文件列表
          RELEASE_FILES=""
          
          # 添加压缩包
          [ -f "qwen-linux-x64.tar.gz" ] && RELEASE_FILES="$RELEASE_FILES qwen-linux-x64.tar.gz"
          [ -f "qwen-windows-x64.zip" ] && RELEASE_FILES="$RELEASE_FILES qwen-windows-x64.zip"
          [ -f "qwen-macos-x64.tar.gz" ] && RELEASE_FILES="$RELEASE_FILES qwen-macos-x64.tar.gz"
          [ -f "qwen-macos-arm64.tar.gz" ] && RELEASE_FILES="$RELEASE_FILES qwen-macos-arm64.tar.gz"
          
          # 创建 release
          gh release create "$RELEASE_TAG" \
            --title "$RELEASE_NAME" \
            --notes "基于 QwenLM/qwen-code@$COMMIT_SHA 的自动构建版本

          📦 **包含平台:**
          - Linux x64: \`qwen-linux-x64.tar.gz\`
          - Windows x64: \`qwen-windows-x64.zip\`
          - macOS x64 (Intel): \`qwen-macos-x64.tar.gz\`
          - macOS ARM64 (Apple Silicon): \`qwen-macos-arm64.tar.gz\`
          
          🚀 **使用方法:**
          1. 下载对应平台的压缩包
          2. 解压后得到 \`qwen\` 或 \`qwen.exe\` 可执行文件
          3. 设置环境变量: \`OPENAI_API_KEY\`, \`OPENAI_BASE_URL\`, \`OPENAI_MODEL\`
          4. 直接运行: \`./qwen\` (Unix) 或 \`qwen.exe\` (Windows)
          
          ⚖️ **许可证说明:**
          - 原始项目许可证: Apache License 2.0
          - 原始项目地址: https://github.com/QwenLM/qwen-code
          - 版权归属: Qwen Team, Alibaba Cloud
          
          ⚠️ **重要声明:** 
          - 这是**非官方**构建版本，不代表原作者立场
          - 如遇问题请优先使用官方版本
          - 使用时请遵守 Apache License 2.0 条款" \
            $RELEASE_FILES

  notify:
    needs: [check-updates, build, release]
    runs-on: ubuntu-latest
    if: always() && needs.check-updates.outputs.should-build == 'true'
    
    steps:
      - name: 通知构建结果
        run: |
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "✅ 构建成功！新版本已发布: auto-${{ needs.check-updates.outputs.latest-commit }}"
          else
            echo "❌ 构建失败，请检查日志"
          fi